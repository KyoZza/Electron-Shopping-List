{
  "_args": [
    [
      {
        "raw": "copy-props@^2.0.1",
        "scope": null,
        "escapedName": "copy-props",
        "name": "copy-props",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Sandro\\OneDrive\\VisualCodeProjekte\\JavaScript\\Others\\Electron\\shoppinglist\\node_modules\\gulp\\node_modules\\gulp-cli"
    ]
  ],
  "_from": "copy-props@>=2.0.1 <3.0.0",
  "_id": "copy-props@2.0.1",
  "_inCache": true,
  "_location": "/copy-props",
  "_nodeVersion": "6.10.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/copy-props-2.0.1.tgz_1492268180092_0.6462797534186393"
  },
  "_npmUser": {
    "name": "sttk",
    "email": "t110000508260@yahoo.co.jp"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "copy-props@^2.0.1",
    "scope": null,
    "escapedName": "copy-props",
    "name": "copy-props",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp/gulp-cli"
  ],
  "_resolved": "https://registry.npmjs.org/copy-props/-/copy-props-2.0.1.tgz",
  "_shasum": "665fc32046ca84a898abaa3c5945e7f248ccba00",
  "_shrinkwrap": null,
  "_spec": "copy-props@^2.0.1",
  "_where": "C:\\Users\\Sandro\\OneDrive\\VisualCodeProjekte\\JavaScript\\Others\\Electron\\shoppinglist\\node_modules\\gulp\\node_modules\\gulp-cli",
  "author": {
    "name": "Takayuki Sato"
  },
  "bugs": {
    "url": "https://github.com/sttk/copy-props/issues"
  },
  "dependencies": {
    "each-props": "^1.3.0",
    "is-plain-object": "^2.0.1"
  },
  "description": "Copy properties deeply between two objects.",
  "devDependencies": {
    "browserify": "^14.1.0",
    "chai": "^3.5.0",
    "eslint": "^3.16.1",
    "istanbul": "^0.4.5",
    "istanbul-coveralls": "^1.0.3",
    "mocha": "^3.2.0",
    "uglify-js": "^2.8.1"
  },
  "directories": {},
  "dist": {
    "shasum": "665fc32046ca84a898abaa3c5945e7f248ccba00",
    "tarball": "https://registry.npmjs.org/copy-props/-/copy-props-2.0.1.tgz"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/sttk/copy-props#readme",
  "keywords": [
    "object",
    "property",
    "copy",
    "deep",
    "map",
    "convert"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "sttk",
      "email": "t110000508260@yahoo.co.jp"
    }
  ],
  "name": "copy-props",
  "optionalDependencies": {},
  "readme": "[copy-props][repo-url] [![NPM][npm-img]][npm-url] [![MIT License][mit-img]][mit-url] [![Build Status][travis-img]][travis-url] [![Build Status][appveyor-img]][appveyor-url] [![Coverage Status][coverage-img]][coverage-url]\n============\n\nCopy properties deeply between two objects.\n\nInstall\n-------\n\n```\n$ npm i copy-props --save\n```\n\nUsage\n-----\n\n* Load this module :\n\n    ```js\n    const copyProps = require('copy-props');\n    ```\n\n* Copy *src* to *dst* simply (and return *dst*) :\n\n    ```js\n    var src = { a: 1, b: { b1: 'bbb' }, c: 'ccc' };\n    var dst = { a: 2, b: { b1: 'xxx', b2: 'yyy' } };\n\n    copyProps(src, dst);\n    // => { a: 1, b: { b1: 'bbb', b2: 'yyy' }, c: 'ccc' }\n    ```\n\n* Copy *src* to *dst* with property mapping (and return *dst*) :\n\n    ```js\n    var src = { a: 1, b: { b1: 'bbb' }, c: 'ccc', d: 'ddd' };\n    var dst = { f: { a: 2, b1: 'xxx', b2: 'yyy' }, e: 'zzz' };\n\n    copyProps(src, dst, {\n      a: 'f.a',\n      'b.b1': 'f.b1',\n      'b.b2': 'f.b2',\n      'c': 'f.c',\n    });\n    // => { f: { a: 1, b1: 'bbb', b2: 'yyy', c: 'ccc' }, e: 'zzz' }\n    ```\n\n* Copy *src* to *dst* with convert function (and return *dst*) :\n\n    ```js\n    var src = { a: 1, b: { b1: 'bbb' } };\n    var dst = { a: 0 };\n\n    copyProps(src, dst, function(srcInfo) {\n      if (srcInfo.keyChain === 'a') {\n        return srcInfo.value * 2;\n      }\n      if (srcInfo.keyChain === 'b.b1') {\n        return srcInfo.value.toUpperCase();\n      }\n    });\n    // => { a: 2, b: { b1: 'BBB' } }\n    ```\n\n* Can use an array instead of a map as property mapping :\n\n    ```js\n    var src = { a: 1, b: { c: 'CCC' }, d: { e: 'EEE' } };\n    var dst = { a: 9, b: { c: 'xxx' }, d: { e: 'yyy' } };\n    var fromto = [ 'b.c', 'd.e' ];\n    copyProps(src, dst, fromto);\n    // => { a: 9, b: { c: 'CCC' }, d: { e: 'EEE' } }\n    ```\n\n* Can copy reversively (from *dst* to *src*) by reverse flag (and return *src*):\n\n    ```js\n    var src = { a: 1, b: { b1: 'bbb' }, c: 'ccc' };\n    var dst = { a: 2, b: { b1: 'xxx', b2: 'yyy' } };\n\n    copyProps(src, dst, true);\n    // => { a: 2, b: { b1: 'xxx', b2: 'yyy' }, c: 'ccc' }\n    ```\n\n    ```js\n    var src = { a: 1, b: { b1: 'bbb' }, c: 'ccc', d: 'ddd' };\n    var dst = { f: { a: 2, b1: 'xxx', b2: 'yyy' }, e: 'zzz' };\n\n    copyProps(src, dst, {\n      a: 'f.a',\n      'b.b2': 'f.b2',\n      'c': 'f.c',\n    }, true);\n    // => { a: 2, b: { b1: 'bbb', b2: 'yyy' }, c: 'ccc', d: 'ddd' }\n    ```\n\n* If a value of source property is undefined (when not using converter), or a result of converter is undefined (when using converter), the value is not copied.\n\n    ```js\n    var src = { a: 'A', b: undefined, c: null, d: 1 };\n    var dst = { a: 'a', b: 'b', c: 'c' };\n\n    copyProps(src, dst, function(srcInfo) {\n      if (srcInfo.keyChain === 'd') {\n        return undefined;\n      } else {\n        return srcInfo.value;\n      }\n    });\n    // => { a: 'A', b: 'b', c: null }\n    ```\n\n* You can operate the parent node object directly in converter.\n\n    ```js\n    var src = { a: 1, b: 2 };\n    var dst = {};\n\n    copyProps(src, dst, function(srcInfo, dstInfo) {\n      Object.defineProperty(dstInfo.parent, dstInfo.key, {\n        writable: false,\n        enumerable: true,\n        configurable: false,\n        value: srcInfo.value * 2\n      })\n    }); // => { a: 2, b: 4 }\n\n    dst // => { a: 2, b: 4 }\n    dst.a = 9\n    dst // -> { a: 2, b: 4 }\n    ```\n\nAPI\n---\n\n### <u>copyProps(src, dst [, fromto] [, converter] [, reverse]) => object</u>\n\nCopy properties of *src* to *dst* deeply.\nIf *fromto* is given, it is able to copy between different properties.\nIf *converter* is given, it is able to convert the terminal values.\n\n**Arguments:**\n\n* **src** [object] : a source object of copy.\n* **dst** [object] : a destinate object of copy.\n* **fromto** [object | array] : an object mapping properties between *src* and *dst*. (optional)\n* **converter** [function] : a function to convert terminal values in *src*. (optional) \n* **reverse** [boolean] : copys reversively from dst to src and returns src object. `fromto` is also reversively used from value to key. This default value is `false`. (optional)\n\n**Return** [object] : *dst* object after copying.\n\n#### *Format of fromto*\n\n*fromto* is a non-nested key-value object. And the *key*s are property key chains of *src* and the *value*s are property key chains of *dst*. \nThe key chain is a string which is concatenated property keys on each level with dots, like `'aaa.bbb.ccc'`.\n\nThe following example copys the value of `src.aaa.bbb.ccc` to `dst.xxx.yyy`.\n\n```js\ncopyProps(src, dst, {\n  'aaa.bbb.ccc' : 'xxx.yyy'\n})\n```\n\n*fromto* can be an array. In that case, the array works as a map which has pairs of same key and value.\n\n#### *API of converter*\n\n**<u>converter(srcInfo, dstInfo) => any</u>**\n\n*converter* is a function to convert terminal values of propeerties of *src*.\n\n**Arguments:**\n\n* **srcInfo** [object] : an object which has informations about the current node of *src*. This object has following properties:\n\n    * **value** : The value of the current node.\n    * **key** : The key name of the current node.\n    * **keyChain** : The full key of the current node concatenated with dot.\n    * **depth** : The depth of the current node.\n    * **parent** : The parent node of the current node.\n\n* **dstInfo** [object] : an object which has informations about the current node of *dst*. This object has following properties:\n\n    * **value** : The value of the current node.\n    * **key** : The key name of the current node.\n    * **keyChain** : The full key of the current node concatenated with dot.\n    * **depth** : The depth of the current node.\n    * **parent** : The parent node of the current node.\n\n\n**Return:** [any] : converted value to be set as a destination property value. If this value is undefined, the destination property is not set to the destination node object.\n\nLicense\n-------\n\nCopyright (C) 2016 Takayuki Sato\n\nThis program is free software under [MIT][mit-url] License.\nSee the file LICENSE in this distribution for more details.\n\n[repo-url]: https://github.com/sttk/copy-props/\n[npm-img]: https://img.shields.io/badge/npm-v2.0.1-blue.svg\n[npm-url]: https://www.npmjs.org/package/copy-props/\n[mit-img]: https://img.shields.io/badge/license-MIT-green.svg\n[mit-url]: https://opensource.org/licenses.MIT\n[travis-img]: https://travis-ci.org/sttk/copy-props.svg?branch=master\n[travis-url]: https://travis-ci.org/sttk/copy-props\n[appveyor-img]: https://ci.appveyor.com/api/projects/status/github/sttk/copy-props?branch=master&svg=true\n[appveyor-url]: https://ci.appveyor.com/project/sttk/copy-props\n[coverage-img]: https://coveralls.io/repos/github/sttk/copy-props/badge.svg?branch=master\n[coverage-url]: https://coveralls.io/github/sttk/copy-props?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sttk/copy-props.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha",
    "coveralls": "istanbul cover _mocha && istanbul-coveralls",
    "lint": "eslint .",
    "test": "mocha",
    "web:build": "browserify index.js --standalone copyProps | uglifyjs --compress --mangle -o web/copy-props.js && node test/web/make.js",
    "web:install": "npm i phantomjs-prebuilt mocha-phantomjs",
    "web:test": "mocha-phantomjs -p node_modules/.bin/phantomjs test/web/copy-props.test.html"
  },
  "version": "2.0.1"
}
